/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.0/userguide/custom_plugins.html
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    `java-gradle-plugin`


    // Apply the java-library plugin for API and implementation separation.
    `java-library`

    `kotlin-dsl`

    id("maven-publish")
    id("com.gradle.plugin-publish") version "0.15.0"

    // Apply the Kotlin JVM plugin to add support for Kotlin.
    id("org.jetbrains.kotlin.jvm") version "1.4.31"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Align versions of all Kotlin components
    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))

    // Use the Kotlin JDK 8 standard library.
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    // Use the Kotlin test library.
    testImplementation("org.jetbrains.kotlin:kotlin-test")

    // Use the Kotlin JUnit integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit")
}

group = "com.github.dave99galloway"
version = "1.4.0"

gradlePlugin {

//    plugins {
//        create("greetingsPlugin") {
//            id = "com.github.dave99galloway.gradle.greeting.greeting"
//            displayName = "the default greeting plugin example"
//            description = "the default greeting plugin example"
//            implementationClass = "gradle.greeting.GradleGreetingPlugin"
//        }
//    }

    plugins {
        create("cucumberTestPlugin") {
            id = "com.github.dave99galloway.cucumbertest.gradle.CucumberTestPlugin"
            displayName = "cucumberTest plugin"
            description = """A cucumber gradle plugin implemented using javaexec. 
This plugin adds a task called 'cucumberTest' to your cucumber-jvm project enabling you to run tests through gradle using
the cucumber cli. Configuration is done at the plugin level and the options to do this are documented in 
com.github.dave99galloway.gradle.cucumbertest.CucumberTestPluginExtension

To use this plugin, follow the provided kotlin dsl instructions below
Limitations / Pre-Requisites :-
 - this plugin has only been tested with Kotlin DSL and Kotlin implementation code. Groovy DSL and Java implementation are not supported
 - you must have a source set called cucumberTest (and a cucumberTestImplementation Configuration extending configurations.implementation
 - you must have a source set called main
 - all your cucumber test code must liven in either or both of these source sets
 - you need to add these dependencies manually (replace cucumberVersion with your cucumber-jvm version or add a gradle property and reference it in your build.gradle):
implementation(group = "io.cucumber", name = "cucumber-java8", version = cucumberVersion)
implementation(group = "io.cucumber", name = "cucumber-java", version = cucumberVersion)
implementation(group = "io.cucumber", name = "cucumber-junit", version = cucumberVersion)
                
            """
            implementationClass = "com.github.dave99galloway.gradle.cucumbertest.CucumberTestPlugin"
        }
    }
}

pluginBundle {
    website = "https://github.com/dave99galloway/cucumberTest"
    vcsUrl = "https://github.com/dave99galloway/cucumberTest"
    tags = listOf("cucumber", "cucumber-jvm", "kotlin")
}

// Add a source set for the functional test suite
val functionalTestSourceSet = sourceSets.create("functionalTest") {
}

gradlePlugin.testSourceSets(functionalTestSourceSet)
configurations["functionalTestImplementation"].extendsFrom(configurations["testImplementation"])

// Add a task to run the functional tests
val functionalTest by tasks.registering(Test::class) {
    testClassesDirs = functionalTestSourceSet.output.classesDirs
    classpath = functionalTestSourceSet.runtimeClasspath
}

tasks.check {
    // Run the functional tests as part of `check`
    dependsOn(functionalTest)
}

tasks.named<Wrapper>("wrapper") {
    gradleVersion = "7.0"
    distributionType = Wrapper.DistributionType.ALL
}


java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    // The new Java toolchain feature cannot be used at the project level in combination with source and/or target compatibility
    //    toolchain {
    //        languageVersion.set(JavaLanguageVersion.of(8))
    //    }
}